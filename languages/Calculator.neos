{
    meta: {
        language: "Calculator"
        description: "A simple expression evaluator language (for neos testing purposes)"
        language.file.extension: [ ".calc" ]
        copyright: "Copyright (C) 2019 Leigh Johnston"
        version: "1.0.0"
    }

    libraries: [
        neos.core
        neos.math
        neos.math.universal
    ]

    expect: statement

    character: {
        is: language.character.utf8
    }

    whitespace: {
        is: language.whitespace
        tokens: {
            ' ': done
            character.LF: done
            character.CR: done
            character.TAB: done
            default: error
        }
    }

    statement: {
        is: language.statement
        expect: end
        expect: expression
        tokens: {
            expression: {
                expect: end
            }
            whitespace: ignore
        }
        end: {
            tokens: {
                ';': done
                whitespace: ignore
            }
        }
    }

    expression: {
        is: math.expression
        expect: term
        tokens: {
            term: {
                '+': math.operator.addition
                '-': math.operator.subtraction
                math.operator: {
                    expect: term
                    whitespace: ignore
                }
                whitespace: ignore
                default: next
            }
        }
        term: {
            expect: term2
            tokens: {
                term2: {
                    '*': math.operator.multiplication
                    '/': math.operator.division
                    math.operator: {
                        expect: term2
                        whitespace: ignore
                    }
                    whitespace: ignore
                    default: next
                }
            }
        }
        term2: {
            expect: primary
            tokens: {
                primary: {
                    '**': math.operator.power
                    '^': math.operator.power
                    math.operator: {
                        expect: primary
                        primary: done
                        whitespace: ignore
                    }
                    whitespace: ignore
                    default: next
                }
            }
        }
        primary: {
            is: math.expression.operand
            tokens: {
                math.universal.number.digit: universal_number
                universal_number: done
                '-': math.operator.negate
                math.operator.negate: {
                    expect: primary
                    primary: done
                    whitespace: ignore
                }
                '(': {
                    expect: expression
                    expression: {
                        expect: ')'
                        ')': done
                        whitespace: ignore
                    }
                    whitespace: ignore
                }
                whitespace: ignore
            }
        }
    }

    universal_number: {
        is: math.universal.number
        tokens: {
            digit: {
                digit: continue
                '.': point
                point: {
                    '.': error
                    digit: continue
                    'e': exponent
                    'E': exponent
                    default: next
                }
                default: next
            }
            '#': base
            base: {
                hexdigit: continue
                '.': point
                point: {
                    '.': error
                    hexdigit: continue
                    '#': {
                        'e': exponent
                        'E': exponent
                        default: next
                    }
                    default: next
                }
                '#': {
                    'e': exponent
                    'E': exponent
                    default: next
                }
            }
            exponent: {
                '+': exponent.positive
                exponent.positive: {
                    digit: exponent.digit
                    exponent.digit: {
                        digit: exponent.digit
                        exponent.digit: continue
                        default: next
                    }
                }
                '-': exponent.negative
                exponent.negative: {
                    digit: exponent.digit
                    exponent.digit: {
                        digit: exponent.digit
                        exponent.digit: continue
                        default: next
                    }
                }
            }
        }
    }
}