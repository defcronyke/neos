{
    meta: {
        language: "Calculator"
        description: "A simple expression evaluator (for neos testing purposes)"
        language.file.extension: [ ".calc" ]
        copyright: "Copyright (C) 2019 Leigh Johnston"
        version: "1.0.0"
    }

    libraries: [
        neos.core
        neos.math
        neos.math.universal
    ]

    expect: statement

    character: {
        is: language.character.utf8
    }

    default: {
        tokens: {
            ' ': whitespace
            character.LF: whitespace
            character.CR: whitespace
            character.TAB: whitespace
            character.EOF: whitespace
        }
    }

    whitespace: {
        is: language.whitespace
        tokens: {
            ' ': whitespace
            character.LF: whitespace
            character.CR: whitespace
            character.TAB: whitespace
            character.EOF: whitespace
        }
    }

    statement: {
        is: language.statement
        expect: expression
        tokens: {
            expression: {
                expect: end
            }
        }
        end: {
            tokens: {
                ';': done
            }
        }
    }

    expression: {
        is: math.expression
        expect: term
        tokens: {
            term: {
                '+': math.operator.addition
                '-': math.operator.subtraction
                math.operator: {
                    expect: term
                }
                statement.end: done
            }
        }
        term: {
            expect: primary
            tokens: {
                primary: {
                    '*': math.operator.multiplication
                    '/': math.operator.division
                    math.operator: {
                        expect: primary
                    }
                    default: done
                }
            }
        }
        primary: {
            is: math.expression.operand
            tokens: {
                character.digit: universal_number.digit
                '-': math.operator.negate
                math.operator.negate: {
                    expect: primary
                }
                '(': {
                    expect: expression
                    expression: {
                        expect: ')'
                        ')': done
                    }
                }
            }
        }
    }

    universal_number: {
        is: math.universal.number
        tokens: {
            character.digit: universal_number.digit
            '.': universal_number.point
            universal_number.point: {
                character.digit: universal_number.digit
                'e': universal_number.exponent
                'E': universal_number.exponent
                whitespace: done
                character: next
            }
            '#': universal_number.base
            universal_number.base: {
                character.hexdigit: universal_number.hexdigit
                '.': universal_number.point
                universal_number.point: {
                    character.hexdigit: universal_number.hexdigit
                    '#': {
                        'e': universal_number.exponent
                        'E': universal_number.exponent
                        whitespace: done
                        character: next
                    }
                    whitespace: done
                    character: next
                }
                '#': {
                    'e': universal_number.exponent
                    'E': universal_number.exponent
                    whitespace: done
                    character: next
                }
            }
            universal_number.exponent: {
                '+': universal_number.exponent.positive
                universal_number.exponent.positive: {
                    character.digit: universal_number.exponent.digit
                    universal_number.exponent.digit: {
                        character.digit: universal_number.exponent.digit
                        whitespace: done
                        character: next
                    }
                }
                '-': universal_number.exponent.negative
                universal_number.exponent.negative: {
                    character.digit: universal_number.exponent.digit
                    universal_number.exponent.digit: {
                        character.digit: universal_number.exponent.digit
                        whitespace: done
                        character: next
                    }
                }
            }
            whitespace: done
            character: next
        }
    }
}