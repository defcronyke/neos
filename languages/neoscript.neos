{
    meta : {
        language: "neoscript"
        description: "Default neoGFX scripting language; similar to Ada"
        copyright: "Copyright (C) 2019 Leigh Johnston"
        version: "1.0.0"
    }

    modules : [
        math
        string
        io
        gc
        i42.magic
    ]

    tokens : {
        ' ': whitespace
        character.LF: whitespace
        character.CR: whitespace
        character.TAB: whitespace
        character.EOF: whitespace
        '-' : {
            '-': comment.open
        }
        character.alpha: keyword.open
        character.underscore: keyword.open
    }

    identifier : {
        tokens : {
            character.alpha: identifier
            character.digit: identifier
            character.underscore: identifier
            whitespace: close
        }
    }

    keyword : {
        tokens : {
            character.alpha: keyword
            whitespace: close
        }
        "with": with
        "use": use
        "packet": package
        "body": body
        "is": is
        "function": function
        "begin": begin
        "end": end
        "for": for
        "loop": loop
        "while": while
        "return": return
    }

    with : {
        expect: package.name
        package.name : {
            tokens : {
                whitespace: whitespace
                ';': engine.module.import
            }
        }
    }

    use : {
        expect: package.name
        package.name : {
            tokens : {
                whitespace: whitespace
                ';': engine.module.instantiate
            }
        }
    }

    expression : {
        tokens : {
            '=': object.operator.equality
            ':': {
                '=': object.operator.assignment
            }
            '+': math.operator.addition
            '-': math.operator.subtraction
            '*': math.operator.multiplication
            '/': math.operator.division
            '(': math.expression.open
            ')': math.expression.close
            '\"': string.open
        }
    }

    package.name : {
        tokens : {
            character.alpha: package.name
            package.name : {
                character.alpha: package.name
                character.digit: package.name
                character.underscore: package.name
                character.underscore: {
                    character.alpha: package.name
                }
                character.period: package.name
                character.period: {
                    character.alpha: package.name
                }
                whitespace: close
                character: next
            }
        }
    }

    comment : {
        tokens : {
            character.LF: close
            character : whitespace
        }
    }

    string : {
        tokens : {
            '\"': close
            '\\': escape.open
            character: string
        }
        escape : {
            tokens : {
                '\"': character.quote
                'n': character.LF
                'r': character.CR
                't': character.TAB
                'u': unicode1
                character: string
                unicode1 : {
                    character.hexdigit : unicode2
                    unicode2 : {
                        character.hexdigit : unicode3
                        unicode3 : {
                            character.hexdigit : unicode4
                            unicode4 : {
                                character.hexdigit : code_unit
                                code_unit : {
                                    make.character.utf16 : [unicode1, unicode2, unicode3, unicode4]
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}