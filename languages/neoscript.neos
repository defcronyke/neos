{
    meta: {
        language: "neoscript"
        description: "Default neoGFX scripting language"
        sourcecode.file.extension: [ "neo" ]
        copyright: "Copyright (C) 2019 Leigh Johnston"
        version: "1.0.0"
    }

    libraries: [
        neos.core
        neos.math.universal
    ]

    expect: whitespace
    expect: comment
    expect: keyword

    tokens: {
        whitespace: done
        comment: done
        keyword: done
    }

    package: {
        name: {
            is: module.package.name
            tokens: {
                character.alpha: rest
                rest: done
            }
            rest: {
                expect: none
                tokens: {
                    character.alpha: continue
                    character.period: need_alpha
                    default: next
                }
            }
            need_alpha: {
                tokens: {
                    character.alpha: rest
                }
            }
        }
    }

    character: {
        is: string.utf8.character
    }

    whitespace: {
        is: language.whitespace
        tokens: {
            ' ': done
            '\n': done
            '\r': done
            '\t': done
			default: next
		}
    }

    comment: {
        is: language.comment
        is: language.whitespace
        tokens: {
            '-': {
                '-': {
                    '\n': done
                    default: ignore
                }
            }
        }
    }

    keyword: {
        expect: root
        tokens: {
            root: done
        }
        root: {
            tokens: {
                "using": using
                "import": import
                "def": def
                "fn": fn
                "proc": proc
                language.keyword: done
            }
            using: {
                is: language.keyword
                expect: whitespace
                tokens: {
                    package.name: module.package.import
                    module.package.import: module.package.instantiate
                    module.package.instantiate: {
                        expect: statement.end
                        statement.end: drain
                    }
                    whitespace: ignore
                }
            }
            import: { is: language.keyword }
            def: { is: language.keyword }
            fn: { is: language.keyword }
            proc: { is: language.keyword }
        }
        function: {
            tokens: {
                "if": if
                "else": else
                "return": return
                language.keyword: done
            }
        }
        if: { is: language.keyword }
        else: { is: language.keyword }
        return: { is: language.keyword }
    }

    statement: {
        is: language.statement
        expect: end
        expect: expression
        tokens: {
            expression: {
                expect: end
                end: done
            }
            end: done
            whitespace: ignore
        }
        end: {
            tokens: {
                ';': done
                whitespace: ignore
            }
        }
    }

    expression: {
        is: math.expression
        expect: term
        tokens: {
            term: {
                expect: none
                '+': math.operator.add
                '-': math.operator.subtract
                math.operator.addition: {
                    expect: term
                }
                whitespace: ignore
                default: next
            }
        }
        term: {
            expect: term2
            tokens: {
                term2: {
                    expect: none
                    '*': math.operator.multiply
                    '/': math.operator.divide
                    math.operator.multiplication: {
                        expect: term2
                    }
                    whitespace: ignore
                    default: next
                }
            }
        }
        term2: {
            expect: primary
            tokens: {
                primary: {
                    expect: none
                    '**': math.operator.power
                    '^': math.operator.power
                    math.operator: {
                        expect: primary
                    }
                    whitespace: ignore
                    default: next
                }
            }
        }
        primary: {
            is: math.expression.operand
            tokens: {
                math.universal.number.digit: universal_number
                universal_number: done
                '-': math.operator.negate
                math.operator.negate: {
                    expect: primary
                    primary: done
                    whitespace: ignore
                }
                '(': {
                    expect: expression
                    expression: {
                        expect: ')'
                        ')': done
                        whitespace: ignore
                    }
                    whitespace: ignore
                }
                whitespace: ignore
            }
        }
    }

    universal_number: {
        is: math.universal.number
        tokens: {
            digit: {
                digit: continue
                '.': point
                point: {
                    '.': error
                    digit: continue
                    'e': exponent
                    'E': exponent
                    default: next
                }
                default: next
            }
            '#': base
            base: {
                hexdigit: continue
                '.': point
                point: {
                    '.': error
                    hexdigit: continue
                    '#': {
                        'e': exponent
                        'E': exponent
                        default: next
                    }
                    default: next
                }
                '#': {
                    'e': exponent
                    'E': exponent
                    default: next
                }
            }
            exponent: {
                expect: '+'
                expect: '-'
                '+': exponent.positive
                exponent.positive: {
                    expect: digit
                    digit: exponent.digit
                    exponent.digit: {
                        digit: exponent.digit
                        exponent.digit: continue
                        default: next
                    }
                }
                '-': exponent.negative
                exponent.negative: {
                    expect: digit
                    digit: exponent.digit
                    exponent.digit: {
                        digit: exponent.digit
                        exponent.digit: continue
                        default: next
                    }
                }
            }
        }
    }
}