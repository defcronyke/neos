{
    meta: {
        language: "neoscript"
        description: "Default neoGFX scripting language"
        sourcecode.file.extension: [ "neo" ]
        copyright: "Copyright (C) 2019 Leigh Johnston"
        version: "1.0.0"
    }

    libraries: [
        neos.core
        neos.math.universal
    ]

    expect: whitespace
    expect: comment
    expect: root_keyword

    tokens: {
        whitespace: ignore
        comment: ignore
        root_keyword: done
    }

    whitespace: {
        is: language.whitespace
        tokens: {
            ' ': ignore
            '\n': ignore
            '\r': ignore
            '\t': ignore
            default: next
        }
    }

    comment: {
        is: language.comment
        tokens: {
            "--": {
                '\n': drain
                default: ignore
            }
        }
    }

    character: {
        is: string.utf8.character
    }

    package: {
        name: {
            is: module.package.name
            tokens: {
                character.alpha: rest
                rest: done
            }
            rest: {
                expect: none
                tokens: {
                    character.alpha: continue
                    character.period: need_alpha
                    default: next
                }
            }
            need_alpha: {
                tokens: {
                    character.alpha: rest
                }
            }
        }
    }

    keyword: {
        as: language.keyword
        tokens: {
            "using": using
            "import": import
            "def": def
            "fn": fn
            "proc": proc
            "in": in
            "out": out
            "if": if
            "else": else
            "return": return
            language.keyword: {
                expect: none
                character.alpha: error
                character.underscore: error
                character.digit: error
                default: next
            }
            whitespace: ignore
        }
        using: { is: language.keyword }
        import: { is: language.keyword }
        def: { is: language.keyword }
        fn: { is: language.keyword }
        proc: { is: language.keyword }
        in: { is: language.keyword }
        out: { is: language.keyword }
        if: { is: language.keyword }
        else: { is: language.keyword }
        return: { is: language.keyword }
    }

    root_keyword:
    {
        expect: keyword
        tokens: {
            keyword.using: using
            keyword.import: import
            keyword.def: def
            default: next
        }
        using: {
            expect: whitespace
            tokens: {
                package.name: module.package.import
                module.package.import: module.package.instantiate
                module.package.instantiate: {
                    expect: statement.end
                    statement.end: drain
                }
                whitespace: ignore
            }
        }
        import: {
            expect: keyword
            tokens: {
                keyword.fn: fn
                keyword.proc: proc
                fn: {
                    expect: statement.end
                    statement.end: language.function.import
                    language.function.import: done
                }
                proc: {
                    expect: statement.end
                    statement.end: language.function.import
                    language.function.import: done
                }
                whitespace: ignore
            }
        }
        def: {
            expect: keyword
            tokens: {
                keyword.fn: fn
                keyword.proc: proc
                fn: {
                    expect: statement.end
                    statement.end: drain
                }
                proc: {
                    expect: statement.end
                    statement.end: drain
                }
                whitespace: ignore
            }
        }
        fn: {
            is: language.function.signature
            expect: whitespace
            tokens: {
                identifier: {
                    '(': {
                        fn_parameters: {
                            ')': {
                                "->": {
                                    expect: type
                                    type: language.function.return
                                    language.function.return: done
                                    whitespace: ignore
                                }
                                whitespace: ignore
                                default: next
                            }
                        }
                    }
                    whitespace: ignore
                }
                whitespace: ignore
            }
        }
        proc: {
            is: language.function.signature
            expect: whitespace
            tokens: {
                identifier: {
                    '(': {
                        proc_parameters: {
                            ')': done
                        }
                        ')': done
                        whitespace: ignore
                    }
                    whitespace: ignore
                }
                whitespace: ignore
            }
        }
    }

    identifier: {
        is: language.identifier
        tokens: {
            character.alpha: rest
            character.underscore: rest
        }
        rest: {
            expect: none
            tokens: {
                character.alpha: continue
                character.underscore: continue
                character.digit: continue
                default: next
            }
        }
        end: {
            expect: none
            tokens: {
                character.alpha: error
                character.underscore: error
                character.digit: error
                default: next
            }
        }
    }

    fn_parameters: {
        is: language.function.parameters
        tokens: {
            parameter_block: {
                expect: none
                ';': {
                    expect: parameter_block
                }
                whitespace: ignore
                default: next
            }
            whitespace: ignore
            default: next
        }
        parameter_block: {
            tokens: {
                parameter: {
                    ',': {
                        expect: parameter
                    }
                    ':': {
                        expect: type
                        type: done
                    }
                    whitespace: ignore
                }
                whitespace: ignore
                default: next
            }
        }
        parameter: {
            is: language.function.parameter
            tokens: {
                identifier: done
                whitespace: ignore
            }
        }
    }

    proc_parameters: {
        is: language.function.parameters
        tokens: {
            parameter_block: {
                expect: none
                ';': {
                    expect: parameter_block
                }
                whitespace: ignore
                default: next
            }
            whitespace: ignore
            default: next
        }
        parameter_block: {
            tokens: {
                parameter: {
                    ',': {
                        expect: parameter
                    }
                    ':': {
                        expect: keyword
                        expect: type
                        keyword.in : language.function.parameter.direction.in
                        language.function.parameter.direction.in : {
                            expect: type
                            type: done
                        }
                        keyword.out : language.function.parameter.direction.out
                        language.function.parameter.direction.out : {
                            expect: type
                            type: done
                        }
                        type: done
                    }
                    whitespace: ignore
                }
                whitespace: ignore
                default: next
            }
        }
        parameter: {
            is: language.function.parameter
            tokens: {
                identifier: done
                whitespace: ignore
            }
        }
    }

    type: {
        tokens: {
            "i8": language.type.i8
            "u8": language.type.u8
            "i16": language.type.i16
            "u16": language.type.u16
            "i32": language.type.i32
            "u32": language.type.u32
            "i64": language.type.i64
            "u64": language.type.u64
            "string": language.type.string
            identifier: language.type.custom
            language.type.custom: done
            language.type: {
                identifier.end: done
            }
            whitespace: ignore
        }
    }

    statement: {
        is: language.statement
        expect: end
        expect: expression
        tokens: {
            expression: {
                expect: end
                end: done
            }
            end: done
            whitespace: ignore
        }
        end: {
            tokens: {
                ';': done
                whitespace: ignore
            }
        }
    }

    expression: {
        is: math.expression
        expect: term
        tokens: {
            term: {
                expect: none
                '+': math.operator.add
                '-': math.operator.subtract
                math.operator.addition: {
                    expect: term
                }
                whitespace: ignore
                default: next
            }
        }
        term: {
            expect: term2
            tokens: {
                term2: {
                    expect: none
                    '*': math.operator.multiply
                    '/': math.operator.divide
                    math.operator.multiplication: {
                        expect: term2
                    }
                    whitespace: ignore
                    default: next
                }
            }
        }
        term2: {
            expect: primary
            tokens: {
                primary: {
                    expect: none
                    '**': math.operator.power
                    '^': math.operator.power
                    math.operator: {
                        expect: primary
                    }
                    whitespace: ignore
                    default: next
                }
            }
        }
        primary: {
            is: math.expression.operand
            tokens: {
                math.universal.number.digit: universal_number
                universal_number: done
                '-': math.operator.negate
                math.operator.negate: {
                    expect: primary
                    primary: done
                    whitespace: ignore
                }
                '(': {
                    expect: expression
                    expression: {
                        expect: ')'
                        ')': done
                        whitespace: ignore
                    }
                    whitespace: ignore
                }
                whitespace: ignore
            }
        }
    }

    universal_number: {
        is: math.universal.number
        tokens: {
            digit: {
                digit: continue
                '.': point
                point: {
                    '.': error
                    digit: continue
                    'e': exponent
                    'E': exponent
                    default: next
                }
                default: next
            }
            '#': base
            base: {
                hexdigit: continue
                '.': point
                point: {
                    '.': error
                    hexdigit: continue
                    '#': {
                        'e': exponent
                        'E': exponent
                        default: next
                    }
                    default: next
                }
                '#': {
                    'e': exponent
                    'E': exponent
                    default: next
                }
            }
            exponent: {
                expect: '+'
                expect: '-'
                '+': exponent.positive
                exponent.positive: {
                    expect: digit
                    digit: exponent.digit
                    exponent.digit: {
                        digit: exponent.digit
                        exponent.digit: continue
                        default: next
                    }
                }
                '-': exponent.negative
                exponent.negative: {
                    expect: digit
                    digit: exponent.digit
                    exponent.digit: {
                        digit: exponent.digit
                        exponent.digit: continue
                        default: next
                    }
                }
            }
        }
    }
}